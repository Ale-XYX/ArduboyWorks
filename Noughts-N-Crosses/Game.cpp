// Include libs
#include "Game.h"

// Image at splash screen
const unsigned char Game::logoImage[] PROGMEM = {
0x38, 0x48, 0x88, 0x8, 0x4, 0x2, 0x1, 0xc1, 0x1, 0x1, 0x1, 0x2, 0x4, 0x38, 0x20, 0x20, 0x10, 0x70, 0x40, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc7, 0xc7, 0xc7, 0xff, 
0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7, 0x7, 0x7, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x00, 0x00, 
0x00, 0xff, 0xff, 0xff, 0xc7, 0xc7, 0xc7, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc7, 0xc7, 0xc7, 0xc7, 0xc7, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7, 0x3f, 0x3f, 
0xf8, 0xc0, 0xf8, 0x3f, 0x3f, 0x7, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1, 0xd, 0x7a, 0x82, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x40, 0x20, 0x10, 0x8, 0x8, 0x4, 0x3, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc3,
0xc3, 0xc3, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xff, 0xff, 0xff, 0x00, 0x00, 
0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x00, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 
0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 
};

// Title screen images
const unsigned char Game::titleImage[] PROGMEM = {
  0xfe, 0xff, 0xff, 0x7, 0x7, 0x7, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x7, 0x7, 0x7, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xfe, 0x00, 0x00, 0x00, 0xfe, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x7, 0x7, 0x47, 0xe7, 0xe7, 0xc2, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xfe, 0x70, 0x70, 0x70, 0xfe, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x2, 0x7, 
  0x7, 0xff, 0xff, 0xff, 0x7, 0x7, 0x2, 0x00, 0x00, 0x00, 0x3e, 0x7f, 0x7f, 0x77, 0x77, 0x77, 0xf7, 0xf7, 0xe2, 0x7, 0xf, 0x7, 0x00, 0x00, 0x00, 0x7, 0xf, 0x7, 0x00, 0x00, 0x00, 0x7, 
  0xf, 0xf, 0xe, 0xe, 0xe, 0xf, 0xf, 0x7, 0x00, 0x00, 0x00, 0x7, 0xf, 0xf, 0xe, 0xe, 0xe, 0xf, 0xf, 0x7, 0x00, 0x00, 0x00, 0x7, 0x8f, 0x8f, 0x8e, 0x8e, 0x8e, 0x8f, 0x8f, 0x7, 0x00, 0x00, 
  0x00, 0x7, 0xf, 0x7, 0x00, 0x00, 0x00, 0x7, 0xf, 0x7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7, 0xf, 0x7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4, 0xe, 0xe, 0xe, 0xe, 0xe, 0xf, 0xf, 0x7, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3, 0x3, 0x3, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 
  0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x83, 0xc7, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 
  0xc7, 0x83, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x80, 0xc0, 
  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0xff, 0xff, 0xff, 0x81, 0x81, 0x81, 0x81, 0x81, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0xf, 0x1f, 0xf, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0xff, 0x81, 0x81, 0x81, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xf, 0x9f, 0x9f, 0x9d, 0x9d, 0x9d, 0xfd, 0xfd, 0xf8, 0x00, 0x00, 0x00, 0xf, 0x9f, 0x9f, 0x9d, 0x9d, 0x9d, 0xfd, 0xfd, 
  0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x9d, 0x9d, 0x9d, 0x9d, 0x89, 0x00, 0x00, 0x00, 0x00, 0xf, 0x9f, 0x9f, 0x9d, 0x9d, 0x9d, 0xfd, 0xfd, 0xf8, 0x1, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 
  0x3, 0x1, 0x00, 0x00, 0x00, 0x1, 0x3, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x1, 0x00, 0x00, 0x00, 0x1, 0x3, 0x3, 0x3, 0x3, 
  0x3, 0x3, 0x3, 0x1, 0x00, 0x00, 0x00, 0x1, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x1, 0x00, 0x00, 0x00, 0x1, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x1, 0x00, 0x00, 0x00, 0x1, 0x3, 0x3, 0x3, 
  0x3, 0x3, 0x3, 0x3, 0x1, 
};

// Images of board
const unsigned char Game::boardImage[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0xff, 0xff, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 
  0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0xff, 0xff, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
};

// Selector image
const unsigned char Game::selectorImage[] PROGMEM = {
  0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 
};

// Noughts/Crosses
const unsigned char Game::noughtImage[] PROGMEM = {0xfc, 0xfc, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0xfc, 0xfc, 0x7, 0x7, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7, 0x7};
const unsigned char Game::crossImage[] PROGMEM = {0x3, 0x3, 0xc, 0xc, 0xb0, 0xf0, 0xe0, 0xf0, 0xb0, 0xc, 0xc, 0x3, 0x3, 0x18, 0x18, 0x6, 0x6, 0x1, 0x1, 0x00, 0x1, 0x1, 0x6, 0x6, 0x18, 0x18};

// Update game board
void Game::updateGrid(uint16_t x, uint16_t y) {
  // Draw board
  arduboy.drawBitmap(x, y, boardImage, 61, 61);
  
  for (uint8_t yi = 0; yi < 3; ++yi) {
    
    // For loop x
    for (uint8_t xi = 0; xi < 3; ++xi) {
      
      // Define pos
      uint16_t yPos = y + (yi * 21);
      uint16_t xPos = x + (xi * 21);

      // If grid value is Nought, draw nought, cross, draw cross.
      if (grid[yi][xi] == Cell::Nought) {
        arduboy.drawBitmap(xPos + 3, yPos + 3, noughtImage, 13, 13);
      } else if (grid[yi][xi] == Cell::Cross) {
        arduboy.drawBitmap(xPos + 3, yPos + 3, crossImage, 13, 13);
      }

      // If the selector is the same as the iterables, then draw selector at position
      if(xi == selector.x && yi == selector.y) {
        arduboy.drawBitmap(xPos + 1, yPos + 1, selectorImage, 17, 17);
      }
    }
  }
}

// Updating player panel
void Game::updatePlayerPanel(uint16_t x, uint16_t y) {
  for (uint8_t yi = 0; yi < 2; yi++) {
    
    // Set y position
    uint16_t yPos = y + (yi * 15);

    // Set cursor for printing
    arduboy.setCursor(x + 15, yPos + 2);

    // Print "P" then iterable plus 1 to represent player 1 and 2
    arduboy.print(F("P"));
    arduboy.print(yi + 1);

    // Draw hollow rect
    // If the enum value of player is the same as the iterable
    // Draw a filled rect to represent that players turn
    arduboy.drawRect(x, yPos, 10, 10);
    if(static_cast<uint8_t>(player) - 1 == yi) {arduboy.fillRect(x + 2, yPos + 2, 6, 6);}
  }
}

// Check input and perform according actions
void Game::updateInput() {
  
  // If in game and pressed arrow buttons
  // Increment the selectors x/y value
  // If the x/y value is higher than 2 or lower than 0
  // Set them to 0 and 2 respectively
  if (arduboy.justPressed(RIGHT_BUTTON) and gstate == 0 and gscreen == 1) {
    selector.x++;
    sound.tone(300, 75);
    if (selector.x > 2) {selector.x = 0;}
  } 
  if (arduboy.justPressed(LEFT_BUTTON) and gstate == 0 and gscreen == 1) {
    selector.x--;
    sound.tone(300, 75);
    if (selector.x < 0) {selector.x = 2;}
  } 
  if (arduboy.justPressed(UP_BUTTON) and gstate == 0 and gscreen == 1) {
    selector.y--;
    sound.tone(300, 75);
    if (selector.y < 0) {selector.y = 2;}
  } 
  if (arduboy.justPressed(DOWN_BUTTON) and gstate == 0 and gscreen == 1) {
    selector.y++;
    sound.tone(300, 75);
    if (selector.y > 2) {selector.y = 0;}
  }

  // If the screen is game, and the game is not paused or someone won
  if (arduboy.justPressed(A_BUTTON) and gstate == 0 and gscreen == 1) {

    // If the chosen area by the selector is empty
    if (grid[selector.y][selector.x] == Cell::Empty) {

      // Set the grid value to the players current cell state
      // Set player to Cell::Cross if currently Cell::Nought, Cell::Nought if otherwise
      // Run updateWinners() in order to return if any matches were found
      grid[selector.y][selector.x] = player;
      player = (player == Cell::Nought) ? Cell::Cross : Cell::Nought;
      Cell winrar = updateWinners();

      // If the returned winner is empty, check if there are any spaces left
      // If there are none, set gstate to 2 with winner still empty and play the lose sound
      // Else, play normal play sound
      if (winrar == Cell::Empty) {
        if (isCatsGame()) {
          sound.tone(400, 100, 300, 100, 200, 100);
          gstate = 2;
        } else {sound.tone(200, 100, 150, 100);}

      // If the returned winner isnt empty
      // Play the win sound,
      // Set the winner to the returned value
      // Set gstate to 2,
      } else {
        sound.tone(200, 100, 300, 100, 400, 100);
        winner = winrar;
        gstate = 2;
      }
      
    // If the selected area is not empty
    // Play the denied sound
    } else {
      sound.tone(100, 100);
    }
  
  // If the A button is pressed and the gscreen is the title
  // Change the screen to the main game and play the start sound
  } else if (arduboy.justPressed(A_BUTTON) and gscreen == 0) {
    sound.tone(200, 100, 300, 100);
    gscreen++;
  }

  // If the B button is pressed and the game state is not already in a winner state or a paused state
  // Set the game state to paused and play the paused sound
  if (arduboy.justPressed(B_BUTTON) and gstate != 1 and gstate != 2) {
    sound.tone(400, 100, 500, 100);
    gstate = 1;
  } else if (arduboy.justPressed(B_BUTTON) and gstate == 1) {
    sound.tone(500, 100, 400, 100);
    gstate = 0;
  } else if (arduboy.justPressed(B_BUTTON) and gstate == 2) {
    selector.x = 1;
    selector.y = 1;
    gstate = 0;
    player = randomCell();
    gscreen--;
    winner = Cell::Empty;
    
    for (uint8_t y = 0; y < 3; y++) {
      for (uint8_t x = 0; x < 3; x++) {
        grid[y][x] = Cell::Empty;
      }
    }
    sound.tone(500, 100);
  }
}

void Game::updateGameState() {
  arduboy.setCursor(5, 35);
  if (gstate == 0) {
    return;
  } else if (gstate == 1) {
    arduboy.print(F("Paused."));
  } else if (gstate == 2) {
    if (winner == Cell::Cross) {
      arduboy.print(F("Crosses"));
      arduboy.setCursor(5, 45);
      arduboy.print(F("Wins!"));
    } else if (winner == Cell::Nought) {
      arduboy.print(F("Noughts"));
      arduboy.setCursor(5, 45);
      arduboy.print(F("Wins!"));
    } else if (winner == Cell::Empty) {
      arduboy.print(F("Cat's"));
      arduboy.setCursor(5, 45);
      arduboy.print(F("Game!"));
    }
  }
}

Cell Game::updateWinners(void) {
  for (uint8_t i = 0; i < 8; i++) {
    Point2 a = winningSets[i][0];
    Point2 b = winningSets[i][1];
    Point2 c = winningSets[i][2];
    Cell target = grid[a.y][a.x];
    
    if (target != Cell::Empty && grid[b.y][b.x] == target && grid[c.y][c.x] == target) {
      return target;
    }
  }
  return Cell::Empty;
}

Cell Game::randomCell() {
  return static_cast<Cell>(rand() % 2);
}

void Game::updateGameScreen() {
  if (gscreen == 0) {
    updateInput();
    arduboy.drawBitmap(23, 0, titleImage, 81, 42);
    arduboy.setCursor(35, 50);
    arduboy.print(F("A To Start"));
    
  } else if (gscreen == 1) {
    updateInput();
    updateGrid(64, 1);
    updatePlayerPanel(5, 2);
    updateGameState();
  }
}

bool Game::isCatsGame() {
  for (uint8_t y = 0; y < 3; y++) {
    for (uint8_t x = 0; x < 3; x++) {
      if (grid[y][x] == Cell::Empty) {
        return false;
      }
    }
  }
  return true;
}

void Game::gameSetup() {
  arduboy.boot();
  arduboy.audio.on();

  arduboy.drawBitmap(12, 23, logoImage, 103, 17);
  arduboy.display();
  sound.tone(200, 150, 300, 150, 250, 200);
  
  selector.x = 1;
  selector.y = 1;
  
  delay(1500);

  arduboy.clear();
}

void Game::gameLoop() {
  if (!arduboy.nextFrame()) {return;}
  arduboy.pollButtons();
  arduboy.clear();

  updateGameScreen();
  Serial.write(arduboy.getBuffer(), 128 * 64 / 8);
  
  arduboy.display();
}

