#include "Game.h"

const unsigned char Game::logoImage[] PROGMEM = {
  0x38, 0x48, 0x88, 0x8, 0x4, 0x2, 0x1, 0xc1, 0x1, 0x1, 0x1, 0x2, 0x4, 0x38, 0x20, 0x20, 0x10, 0x70, 0x40, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc7, 
  0xc7, 0xc7, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7, 0x3f, 0x7f, 0xf8, 0xf0, 0xf8, 0x7f, 0x3f, 0x7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 
  0x7, 0x7, 0x7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc7, 0xc7, 0xc7, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc7, 0xc7, 0xc7, 0xc7, 0xc7, 0xc7, 0x00, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0x7, 0x7, 0xf, 0x3c, 0x38, 0x3c, 0xf, 0x7, 0x7, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1, 0xd, 0x3a, 0xc2, 0x80, 0x40, 0x80, 0x00, 0x80, 0x80, 0x40, 
  0x20, 0x10, 0x8, 0x8, 0x4, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc7, 0xc7, 0xc7, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x1, 0x1, 0x1, 0xff, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 
  0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 
  0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x1, 0x1, 
  0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 
};

const unsigned char Game::boardImage[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0xff, 0xff, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 
  0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0xff, 0xff, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
};

const unsigned char Game::selectorImage[] PROGMEM = {
  0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 
};

const unsigned char Game::noughtImage[] PROGMEM = {0xfc, 0xfc, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0xfc, 0xfc, 0x7, 0x7, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7, 0x7};
const unsigned char Game::crossImage[] PROGMEM = {0x3, 0x3, 0xc, 0xc, 0xb0, 0xf0, 0xe0, 0xf0, 0xb0, 0xc, 0xc, 0x3, 0x3, 0x18, 0x18, 0x6, 0x6, 0x1, 0x1, 0x00, 0x1, 0x1, 0x6, 0x6, 0x18, 0x18};

void Game::updateGrid(uint16_t x, uint16_t y) {
  arduboy.drawBitmap(x, y, boardImage, 61, 61);
  
  for (uint8_t yi = 0; yi < 3; ++yi) {
    for (uint8_t xi = 0; xi < 3; ++xi) {
      uint16_t yPos = y + (yi * 21);
      uint16_t xPos = x + (xi * 21);
  
      if (grid[yi][xi] == Cell::Nought) {
        arduboy.drawBitmap(xPos + 3, yPos + 3, noughtImage, 13, 13);
      } else if (grid[yi][xi] == Cell::Cross) {
        arduboy.drawBitmap(xPos + 3, yPos + 3, crossImage, 13, 13);
      }
      
      if(xi == selector.x && yi == selector.y) {
        arduboy.drawBitmap(xPos + 1, yPos + 1, selectorImage, 17, 17);
      }
    }
  }
}

void Game::updatePlayerPanel(uint16_t x, uint16_t y) {
  for (uint8_t yi = 0; yi < 2; yi++) {
    uint16_t yPos = y + (yi * 15);

    arduboy.setCursor(x + 15, yPos + 2);
    arduboy.drawRect(x, yPos, 10, 10);
    
    arduboy.print("P");
    arduboy.print(yi + 1);
    
    if (player == yi) {arduboy.fillRect(x + 2, yPos + 2, 6, 6);}
  }
}

void Game::updateInput() {
  if (arduboy.justPressed(RIGHT_BUTTON) and gstate == 0) {
    selector.x++;
    sound.tone(300, 75);

    if (selector.x > 2) {selector.x = 0;}
  }
  
  if (arduboy.justPressed(LEFT_BUTTON) and gstate == 0) {
    selector.x--;
    sound.tone(300, 75);

    if (selector.x < 0) {selector.x = 2;}
  }
  
  if (arduboy.justPressed(UP_BUTTON) and gstate == 0) {
    selector.y--;
    sound.tone(300, 75);

    if (selector.y < 0) {selector.y = 2;}
  }
  
  if (arduboy.justPressed(DOWN_BUTTON) and gstate == 0) {
    selector.y++;
    sound.tone(300, 75);

    if (selector.y > 2) {selector.y = 0;}
  }

  if (arduboy.justPressed(A_BUTTON) and gstate == 0) {
    if (grid[selector.y][selector.x] == Cell::Empty) {
      if (player == 0) {
        player++;
        grid[selector.y][selector.x] = Cell::Cross;
      } else if (player == 1) {
        player--;
        grid[selector.y][selector.x] = Cell::Nought;
      }
      
      Cell winrar = updateWinners();
    
      if (winrar == Cell::Empty) {
        sound.tone(250, 100, 200, 100);
      } else {
        winner = winrar;
        gstate = 2;
      }
    } else {
      sound.tone(100, 100);
    }
  }

  if (arduboy.justPressed(B_BUTTON) and gstate != 1) {
    sound.tone(300, 100, 400, 100);
    gstate = 1;
  } else if (arduboy.justPressed(B_BUTTON) and gstate == 1) {
    sound.tone(400, 100, 300, 100);
    gstate = 0;
  }
}

void Game::updateGameState() {
  arduboy.setCursor(5, 40);
  if (gstate == 0) {
    return;
  } else if (gstate == 1) {
    arduboy.print("Paused.");
  } else if (gstate == 2) {
    if (winner == Cell::Cross) {
      arduboy.print("X Wins!");
    } else if (winner == Cell::Nought) {
      arduboy.print("O Wins!");
    }
  }
}

Cell Game::updateWinners(void) {
  for (uint8_t i = 0; i < 8; i++) {
    Point2 a = winningSets[i][0];
    Point2 b = winningSets[i][1];
    Point2 c = winningSets[i][2];
    Cell target = grid[a.y][a.x];
    
    if (target != Cell::Empty && grid[b.y][b.x] == target && grid[c.y][c.x] == target) {
      return target;
    }
  }
  return Cell::Empty;
}

void Game::gameSetup() {
  arduboy.boot();
  arduboy.audio.on();

  arduboy.drawBitmap(12, 23, logoImage, 103, 17);
  arduboy.display();
  sound.tone(200, 150, 300, 150, 250, 200);
  
  delay(1500);

  arduboy.clear();
}

void Game::gameLoop() {
  if (!arduboy.nextFrame()) {return;}
  arduboy.pollButtons();
  arduboy.clear();

  updateInput();
  updateGrid(64, 1);
  updatePlayerPanel(5, 5);
  updateGameState();
  
  arduboy.display();
}

